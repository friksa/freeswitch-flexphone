<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="220" height="140"  creationComplete="init()"   backgroundColor="#3E413E" backgroundAlpha="0.0" borderStyle="solid" cornerRadius="0" alpha="1.0" click="setCanvasFocus()">

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.managers.PopUpManager;
			import flash.external.ExternalInterface;
		
			public  var netConnection:NetConnection = null;
			private var incomingNetStream:NetStream = null
			private var outgoingNetStream:NetStream = null;
			private var publishName:String          = null;
			private var mic:Microphone 				= null;
			private var isConnected:Boolean			= false;
			private var muted:Boolean			    = false;
			private var isRinging:Boolean			= false;
			private var isDialing:Boolean			= false;
			private var ringSound:Sound 			= null
			private var dialSound:Sound 			= null
			private var req:URLRequest 				= null;
			private var ringChannel:SoundChannel    = null;
			private var dialChannel:SoundChannel    = null;
			private var conferenceFlag:Boolean 	= false
			private var numberToCall:String = null;

			private var timer:Timer;
			private var elapsed:uint;
			private var lastTime:uint;

			[@Embed(source="assets/phone_37x16.png")]
			public const phone:Class;
		
			[@Embed(source="assets/gray.png")]
			public const gray:Class;
		
			[@Embed(source="assets/green.png")]
			public const green:Class;

			[@Embed(source="assets/red.png")]
			public const red:Class;

			[@Embed(source="assets/microphone.png")]
			public const micActive:Class;

			[@Embed(source="assets/icon_phone-mute_16x16.png")]
			public const micMute:Class;

			[@Embed(source="assets/icon_speaker_16x16.png")]
			public const speaker:Class;
			
			[@Embed(source="assets/conference_16x16.png")]
			public const conference:Class;			

			[@Embed(source="assets/history.png")]
			public const history:Class;

			[@Embed(source="assets/flag_red.png")]
			public const redFlag:Class;

			[@Embed(source="assets/mail_16x16.png")]
			public const mail:Class;

       		[@Embed(source="assets/ringing.mp3")]
			private var ringingClass:Class; 
			
			[@Embed(source="assets/dialing.mp3")] 
			private var dialingClass:Class; 
			[Bindable]
			public var missedCalls:Array;

			[Bindable]
			public var receivedCalls:Array;

			[Bindable]
			public var dialedCalls:Array;

			private var incomingCallObj:Object;
			private var dialedCallObj:Object;
          	
        private function log(message:String):void
        {
            trace (message);
            if (ExternalInterface.available)
            {
                ExternalInterface.call('console.log', message);
            }
        }

			private function init():void {
			    log("init phone canvas");
				timer =  new Timer(1000, 0);
				timer.addEventListener(TimerEvent.TIMER, timerHandler);

				ringSound = new ringingClass();
				dialSound = new dialingClass();
				initMicrophone();
				missedCalls 	= new Array();
				receivedCalls   = new Array();
				dialedCalls 	= new Array();
			}
			
			
			private function setCanvasFocus():void {
				this.setFocus();
			}

			
			public function initMicrophone():void {
				mic = getMicrophone();
		
				if(mic == null){
					log("No available microphone");
				} else {
					mic.addEventListener(ActivityEvent.ACTIVITY, micActivityHandler);
					mic.addEventListener(StatusEvent.STATUS, micStatusHandler);

					mic.codec = SoundCodec.SPEEX;
					mic.setUseEchoSuppression(true);
					mic.setLoopBack(false);
					mic.setSilenceLevel(0,20000);
					mic.framesPerPacket = 1;
					mic.gain = 70;
					mic.rate = 16;

				}
			}	

			private function getMicrophone() :Microphone 
			{
				var mic:Microphone = Microphone.getMicrophone();
				return mic;
			}			
			
			private function micActivityHandler(event:ActivityEvent):void {}
	
			private function micStatusHandler(event:StatusEvent):void {		
				switch(event.code) {
		
				case "Microphone.Muted":
					break;
				case "Microphone.Unmuted":
					break;
				default:
					log("unknown micStatusHandler event: " + event);
				}
			}
			
			private function toggleMute():void {
				if(isConnected) {
					if(!muted) {
						if(outgoingNetStream != null) {
							outgoingNetStream.close();
							outgoingNetStream = null;
							micIcon.source = micMute;
							toggleMuteButton.setStyle("icon",micActive);
							muted = true;
						}
					}
					else {
						outgoingNetStream = new NetStream(getNetConnection());
						outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
						outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
						outgoingNetStream.attachAudio(mic);
						outgoingNetStream.bufferTime = 0;
						outgoingNetStream.publish(publishName, "live"); 
						var custom_obj:Object = new Object();
						custom_obj.onPlayStatus = playStatus;
						outgoingNetStream.client = custom_obj;
						micIcon.source = micActive;
						toggleMuteButton.setStyle("icon",micMute);
						muted = false;
					}
				}
			}
			
			/**
			 * Initiate dial or hang up
			 */
			private function toggleCall():void{
				if(isConnected){
					doHangUp();
				}else{
					doCall();
				}
			}
			
			private function getNetConnection():NetConnection {
				return netConnection;
			}
			
			private function setNetConnection(netConnection:NetConnection):void {
				this.netConnection = netConnection;
			}
			
			private function getPublishName():String {
				return publishName;
			}
			
			private function setPublishName(publishName:String):void {
				this.publishName = publishName;
			}
			
			public function incomingCall(event:IncomingCallEvent):void {
				statusTxt.text = "Incoming Call : " + (event.sourceName == "" ? event.source : event.sourceName);
				dialButton.enabled   = false;
				if(!isRinging) {
					ringChannel = ringSound.play();
					isRinging = true;
				}		
				incomingCallObj = new Object();
				incomingCallObj.label = event.sourceName;
				incomingCallObj.data  = event.source;	
				incomingCallObj.time  = new Date().toString();
			}
		
			public function callConnected(netConnection:NetConnection, playName:String, publishName:String):void {
				isConnected = true;
				setNetConnection(netConnection);
				setPublishName(publishName);
				incomingNetStream = new NetStream(netConnection);
				incomingNetStream.bufferTime = 0;
				incomingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				incomingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
				incomingNetStream.bufferTime = 0.2;
				incomingNetStream.play("play");
				incomingNetStream.receiveAudio(true);

				
				outgoingNetStream = new NetStream(netConnection);
				outgoingNetStream.bufferTime = 0;
				outgoingNetStream.addEventListener(NetStatusEvent.NET_STATUS, netStatus);
				outgoingNetStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);		
				outgoingNetStream.attachAudio(mic);
				outgoingNetStream.publish("publish", "live");

				var custom_obj:Object = new Object();
				custom_obj.onPlayStatus = playStatus;
				incomingNetStream.client = custom_obj;
				outgoingNetStream.client = custom_obj;
				
				volSlider.enabled 	 = true;
				micSlider.enabled 	 = true;

				changeVolume(null);
				toggleDialButton(false);
				
				if (conferenceFlag) {
					conferenceFlag = false;					
				}
				startTimer();
				
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}		
				
			}
			
			private function toggleDialButton(dial:Boolean){
				if(dial){
					dialButton.setStyle("fillColors",["0x929b15", "0x929b15"]);
				}else{
					dialButton.setStyle("fillColors",["0xFF5A00", "0xB44001"]);
				}
			}
			
			public function callDisconnected(event:CallDisconnectedEvent):void {
				if(incomingNetStream != null) {
					incomingNetStream.play(false); 
				}
				if(outgoingNetStream != null) {
					outgoingNetStream.attachAudio(null);
					outgoingNetStream.close();
				}
				
				doHangUp();
				isConnected 		 = false;
				toggleDialButton(true);
				
				volSlider.enabled    = false;
				micSlider.enabled    = false;
				if (event.message != "onUaCallFailed"){
				statusTxt.text       = "Call terminated";
				}
				else {
				statusTxt.text       = "Busy or Rejected";
				}
				stopTimer();

				dialnumTxt.text = "";

				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				if(muted) {
					micIcon.source = micActive;
				}
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}
			}
			
			public function missedCall():void {
				
				statusTxt.text       = "Missed Call " + incomingCallObj.label;
				isConnected 		 = false;
				toggleDialButton(true);
				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				if(missedCalls.length >= 10) {
					missedCalls.pop();
				}
				missedCalls.unshift(incomingCallObj);
				missedCallIndicator.source = redFlag;
			}
			
			public function mailBoxStatus(isWaiting:Boolean, newMessage:String, oldMessage:String):void {
				if(isWaiting) {
					voicemail.source = mail;
					voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
				}
				else {
					voicemail.source = null;
					voicemail.toolTip = ""
				}
			}
			
			public function mailBoxCount(newMessage:String, oldMessage:String):void {
				voicemail.toolTip = newMessage + " New Message(s) and " + oldMessage + " Old Message(s)"
			}
			
			private function netStatus (evt:NetStatusEvent ):void {		 

				switch(evt.info.code) {
			
					case "NetStream.Play.StreamNotFound":
						break;
			
					case "NetStream.Play.Failed":
						parentApplication.red5Manager.doStreamStatus("failed");
						break;
						
					case "NetStream.Play.Start":	
						parentApplication.red5Manager.doStreamStatus("start");	
						break;
						
					case "NetStream.Play.Stop":			
						parentApplication.red5Manager.doStreamStatus("stop");	
						break;
						
					case "NetStream.Buffer.Full":
						break;
						
					default:
						
				}			 
			} 
			
			private function asyncErrorHandler(event:AsyncErrorEvent):void {
	           log("AsyncErrorEvent: " + event);
	        }
	        
	        private function playStatus(event:Object):void {}
			

			private function doCall():void {
				if(numberToCall != null){
					dialnumTxt.text = numberToCall;
				}
			   doCall2(dialnumTxt.text);
			}

			public function doCall2(dialNum:String):void {
			    dialnumTxt.text = dialNum;
				parentApplication.red5Manager.doCall(dialNum);
				
				toggleDialButton(true);
				statusTxt.text = "Calling......";
				if(!isDialing) {
					dialChannel = dialSound.play(0,10);			
					isDialing = true;
				}
				if(dialedCalls.length >= 10) {
					dialedCalls.pop();
				}
				dialedCallObj 		= new Object();
				dialedCallObj.data  = dialNum;
				dialedCallObj.label = dialNum;
				dialedCallObj.time  = new Date().toString();	
				dialedCalls.unshift(dialedCallObj);
				
			}
			public function doTransfer():void {
				parentApplication.red5Manager.doTransfer(dialnumTxt.text);
			}
			public function doTransfer2(transferTo:String):void {
				parentApplication.red5Manager.doTransfer(dialnumTxt.text);
			}
			private function doHangUp():void {
				parentApplication.red5Manager.doHangUp();
				
				isConnected 		 = false;
				toggleDialButton(true);
				volSlider.enabled    = false;
				micSlider.enabled    = false;
				stopTimer();
				
				if(muted) {
					micIcon.source = micActive;
				}
				if(isDialing) {
					dialChannel.stop();
					isDialing = false;
				}
			        if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
			}
			
			
			private function doAccept():void {
				parentApplication.red5Manager.doAccept();
				
				if(isRinging) {
					ringChannel.stop();
					isRinging = false;
				}
				
				if(receivedCalls.length >= 10) {
					receivedCalls.pop();
				}
				receivedCalls.unshift(incomingCallObj);
				
				toggleDialButton(false);
			}
			
			public function doClose1():void {
				parentApplication.red5Manager.doClose1();
					
			}
			public function doCallChar(chr:String):void {
				if(parentApplication.sendDTMF(chr)){
					addChr(chr);
				}
			}
			
			public function addChr(chr:String):void {
				dialnumTxt.text += chr;
			}
			
			public function setNumberToCall(number:String):void{
				dialnumTxt.text = number;
				numberToCall = number;
			}
			
			public function removeChr():void {
				var i:int = dialnumTxt.text.length;
				if(i > 0) {
					dialnumTxt.text = dialnumTxt.text.substr(0, (i-1));
				}			
			}
			
			private function changeVolume(event:Event):void {
				var st:SoundTransform = incomingNetStream.soundTransform;
				
				st.volume = (volSlider.value) * .01;
				incomingNetStream.soundTransform = st;		
			}
			
			private function changeMicVolume(event:Event):void {
				mic.gain = (micSlider.value)
			}
			
			public function startTimer():void {
				lastTime = (new Date()).time;
				timer.start();
				elapsed = 0;
			}
			
			public function stopTimer():void {
				timer.stop();
				durationTxt.text = "";
			}
			
			public function timerHandler(event:TimerEvent):void {
				var tmp:uint = lastTime;
				lastTime = (new Date()).time;
				elapsed += lastTime - tmp;
			
				var ms:uint = elapsed;	
				var div:uint = 1000 * 60 * 60;
				var hour:uint = ms / div;
				ms -= hour * div;
				div /= 60;
				var min:uint = ms / div;
				ms -= min * div;
				div /= 60;
				var sec:uint = ms / div;
				ms -= sec * div;
			
				var tx:String = hour.toString() + ":"
				if (min < 10) tx += "0";
				tx += min.toString() + ":";
				if (sec < 10) tx += "0";
				tx += sec.toString() ;
			
				durationTxt.text = tx;
			}
			
			private function showHistory():void {
				var historyWin:HistoryWindow = new HistoryWindow();
				PopUpManager.addPopUp(historyWin, this, true);
				PopUpManager.centerPopUp(historyWin);
				
				missedCallIndicator.source = null;
			}
			
			private function doConference():void {
			
				conferenceFlag = true;
				
				if (isConnected)
					parentApplication.red5Manager.addToConf();
				else
					parentApplication.red5Manager.joinConf();			
			
			}
					
		]]>
	</mx:Script>
	
	<mx:Canvas x="10" y="10" width="200" height="78" borderStyle="solid" cornerRadius="10" backgroundColor="#F0F7FE"  borderColor="#191919" borderThickness="1" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:Text x="69" y="2" width="100" color="#FF0000" id="statusTxt"/>
		<mx:Text x="10" y="30" width="200" id="dialnumTxt" fontWeight="normal" fontSize="12" fontFamily="Verdana"/>
		<mx:Text x="134" y="54"  width="91" id="durationTxt" textAlign="right"/>
		<mx:Image x="20" y="55" id="missedCallIndicator" width="16" height="16"/>
		<mx:Image x="54" y="55" width="16" height="16" id="voicemail"/>
		<mx:Text x="10" y="2" width="51" id="registerTxt" color="#20ED16"/>
	</mx:Canvas>
	<mx:Button x="10" y="104" width="128" icon="{phone}" fillAlphas="[1.0, 1.0]" fillColors="[0x929b15, 0x929b15]" click="toggleCall()" color="#FFFFFF" id="dialButton" themeColor="#929b15"/>
	<mx:Button x="10" y="134" width="128" icon="{micMute}" fillAlphas="[1.0, 1.0]" click="toggleMute()" color="#FFFFFF" id="toggleMuteButton"/>
	<mx:Image x="150" y="105" source="{speaker}" width="16" height="16"/>
	<mx:Image id="micIcon" x="176" y="105" width="16" height="16" click="toggleMute()" source="{micActive}" />
	<mx:VSlider id="volSlider" x="150" y="132" height="84" minimum="0" maximum="100" value="70"  snapInterval="5" showDataTip="false"
		allowTrackClick="true" liveDragging="true"  thumbDrag="changeVolume(event)" enabled="false" />
	<mx:VSlider id="micSlider" x="176" y="132" height="84"  minimum="0" maximum="100" value="50" snapInterval="5" showDataTip="false"
		allowTrackClick="true" liveDragging="true"  thumbDrag="changeMicVolume(event)" enabled="false" />
</mx:Canvas>
